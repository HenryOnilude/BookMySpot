// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  type          UserType       @default(DRIVER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  spots         Spot[]
  reviews       Review[]
  notifications Notification[]
  feedback      Feedback[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  ADMIN
  DRIVER
  OWNER
}

model Spot {
  id           String    @id @default(cuid())
  title        String
  description  String
  address      String
  latitude     Float
  longitude    Float
  pricePerHour Float
  pricePerDay  Float?
  ownerId      String
  owner        User      @relation(fields: [ownerId], references: [id])
  isActive     Boolean   @default(true)
  amenities    String[]
  images       String[]
  bookings     Booking[]
  reviews      Review[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([ownerId])
}

model Booking {
  id                   String        @id @default(cuid())
  spotId               String
  spot                 Spot          @relation(fields: [spotId], references: [id])
  userId               String
  user                 User          @relation(fields: [userId], references: [id])
  startTime            DateTime
  endTime              DateTime
  totalPrice           Float
  status               BookingStatus @default(PENDING)
  stripePaymentIntentId String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@index([spotId])
  @@index([userId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Review {
  id        String   @id @default(cuid())
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([spotId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  type      String // FEEDBACK, SUPPORT, QUERY
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
